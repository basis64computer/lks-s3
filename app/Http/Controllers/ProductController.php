<?php

namespace App\Http\Controllers;

use App\Models\Product;
use Illuminate\Http\Request;
use Illuminate\View\View;
use Illuminate\Http\RedirectResponse;
use Illuminate\Support\Facades\Storage; // Ensure this is imported

class ProductController extends Controller
{
    public function index(): View
    {
        $products = Product::latest()->paginate(10);
        return view('products.index', compact('products'));
    }

    public function create(): View
    {
        return view('products.create');
    }

    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'image'         => 'required|image|mimes:jpeg,jpg,png|max:2048',
            'title'         => 'required|min:5',
            'description'   => 'required|min:10',
            'price'         => 'required|numeric',
            'stock'         => 'required|numeric'
        ]);

        if (!$request->hasFile('image')) {
            return back()->withErrors(['image' => 'File tidak ditemukan di request.']);
        }

        $file = $request->file('image');

        if (!$file->isValid()) {
            return back()->withErrors([
                'image' => 'Upload gagal. File tidak valid. Kode error: ' . $file->getError()
            ]);
        }

        // Store image on S3
        $filename = time() . '.' . $file->getClientOriginalExtension();
        $path = 'products/' . $filename; // Path within your S3 bucket
        Storage::disk('s3')->put($path, file_get_contents($file)); // Using file_get_contents for direct upload

        Product::create([
            'image'         => $filename, // Only store the filename, as the full URL will be generated by S3
            'title'         => $request->title,
            'description'   => $request->description,
            'price'         => $request->price,
            'stock'         => $request->stock
        ]);

        return redirect()->route('products.index')->with(['success' => 'Data berhasil disimpan!']);
    }

    public function edit(Product $product): View
    {
        return view('products.edit', compact('product'));
    }

    public function update(Request $request, Product $product): RedirectResponse
    {
        $request->validate([
            'image'         => 'nullable|image|mimes:jpeg,jpg,png|max:2048',
            'title'         => 'required|min:5',
            'description'   => 'required|min:10',
            'price'         => 'required|numeric',
            'stock'         => 'required|numeric'
        ]);

        $filename = $product->image;

        if ($request->hasFile('image')) {
            $file = $request->file('image');

            if ($file->isValid()) {
                // Delete old image from S3
                if ($product->image && Storage::disk('s3')->exists('products/' . $product->image)) {
                    Storage::disk('s3')->delete('products/' . $product->image);
                }

                // Upload new image to S3
                $filename = time() . '.' . $file->getClientOriginalExtension();
                $path = 'products/' . $filename;
                Storage::disk('s3')->put($path, file_get_contents($file));

            } else {
                return back()->withErrors([
                    'image' => 'Upload gambar gagal. Kode error: ' . $file->getError()
                ]);
            }
        }

        $product->update([
            'image'         => $filename,
            'title'         => $request->title,
            'description'   => $request->description,
            'price'         => $request->price,
            'stock'         => $request->stock
        ]);

        return redirect()->route('products.index')->with(['success' => 'Data berhasil diperbarui!']);
    }

    public function destroy(Product $product): RedirectResponse
    {
        // Delete image from S3
        if ($product->image && Storage::disk('s3')->exists('products/' . $product->image)) {
            Storage::disk('s3')->delete('products/' . $product->image);
        }

        $product->delete();

        return redirect()->route('products.index')->with(['success' => 'Data berhasil dihapus!']);
    }

    /**
     * show
     *
     * @param  mixed $id
     * @return View
     */
    public function show(string $id): View
    {
        //get product by ID
        $product = Product::findOrFail($id);

        //render view with product
        return view('products.show', compact('product'));
    }
}